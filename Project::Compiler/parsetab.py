
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN BUILTIN_FUNC CASE COMMENT DIFF DIV DIVIDE DO DOISPONTOS DOUBLEPOINTS DOWNTO ELSE END FOR FUNCTION ID IF IGUAL INTEGER MAIOR MAIOR_IGUAL MAIS MENOR MENOR_IGUAL MENOS MOD MULT NL NOT NUM OF OR PONTO PONTO_VIRGULA PROCEDURE PROGRAM READ READLN REAL REPEAT RETURN SET STRING STRING_TYPE THEN TO TYPE VAR VIRGULA WHILE WRITE WRITELNprogram : PROGRAM ID PONTO_VIRGULA var_declaration_part BEGIN body END PONTOvar_declaration_part : VAR var_declaration_list\n                           | emptyvar_declaration_list : var_declarationvar_declaration_list : var_declaration_list var_declarationvar_declaration_list : var_declaration_list PONTO_VIRGULA var_declarationvar_declaration : id_list DOISPONTOS type PONTO_VIRGULAid_list : ID\n              | id_list VIRGULA IDbody : statementsstatements : statements statementstatements : statementstatement : assign\n                 | writeln\n                 | write\n                 | readln\n                 | read\n                 | if\n                 | case\n                 | while\n                 | for\n                 | function\n                 | procedure\n                 | func_callwriteln : WRITELN "(" Args ")" PONTO_VIRGULAwrite : WRITE "(" Args ")" PONTO_VIRGULAreadln : READLN "(" Args ")" PONTO_VIRGULAread : READ "(" Args ")" PONTO_VIRGULAArgs : Args VIRGULA ArgArgs : ArgArg : const\n           | varassign : var ASSIGN expression PONTO_VIRGULAif : IF expression THEN statement\n          | IF expression THEN statement ELSE statement\n          | IF expression THEN compound_statement\n          | IF expression THEN compound_statement ELSE compound_statementcase : CASE expression OF case_branches END PONTO_VIRGULA\n            | CASE expression OF case_branches ELSE statements END PONTO_VIRGULAcase_branches : case_branches case_branch\n                     | case_branchcase_branch : case_labels DOISPONTOS statementcase_labels : case_labels VIRGULA const\n                   | constexpression : expression OR and_exprexpression : and_exprand_expr : and_expr AND not_exprand_expr : not_exprnot_expr : NOT not_exprnot_expr : rel_exprrel_expr : arith_expr rel_op arith_expr\n                | arith_exprrel_op : IGUAL\n              | DIFF\n              | MAIOR\n              | MENOR\n              | MENOR_IGUAL\n              | MAIOR_IGUALarith_expr : arith_expr add_op termarith_expr : termadd_op : MAIS\n              | MENOS\n              | ORterm : term mul_op factorterm : factormul_op : MULT\n              | DIVIDE\n              | AND\n              | DIV\n              | MODfactor : const\n              | var\n              | "(" expression ")"\n              | func_callwhile : WHILE expression DO compound_statement PONTO_VIRGULA\n             | WHILE "(" expression ")" DO compound_statement PONTO_VIRGULAfor : FOR ID ASSIGN expression TO expression DO compound_statement PONTO_VIRGULA\n           | FOR ID ASSIGN expression DOWNTO expression DO compound_statement PONTO_VIRGULAcompound_statement : BEGIN statements ENDprocedure : PROCEDURE ID "(" params ")" PONTO_VIRGULA var_declaration_part BEGIN body END PONTO_VIRGULAfunction : FUNCTION ID "(" params ")" DOISPONTOS type PONTO_VIRGULA var_declaration_part BEGIN body END PONTO_VIRGULAparams : param_list\n              | emptyparam_list : param\n                  | param_list PONTO_VIRGULA paramparam : id_list DOISPONTOS typeconst : STRING\n             | NUMvar : ID\n           | ID "[" expression "]"type : INTEGER\n            | REAL\n            | STRING_TYPE\n            | BOOLEAN\n            | array_typearray_type : ARRAY "[" NUM DOUBLEPOINTS NUM "]" OF type\n                  | ARRAY "[" NUM "]" OF typefunc_call : ID "(" Args ")"\n                 | BUILTIN_FUNC "(" Args ")"empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,91,],[0,-1,]),'ID':([2,6,8,9,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,34,35,36,37,38,39,41,42,44,45,46,48,49,50,51,52,53,57,64,71,75,76,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,124,126,128,129,131,136,137,138,158,161,162,163,164,165,167,169,171,173,175,176,178,183,184,185,186,187,200,207,211,213,214,218,221,223,],[3,12,13,12,-4,13,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,68,68,68,72,73,74,-5,12,84,85,68,-11,68,85,85,85,85,68,68,68,85,-6,13,68,68,68,68,-53,-54,-55,-56,-57,-58,-61,-62,-63,68,-66,-67,-68,-69,-70,68,12,12,-7,-98,85,-33,-34,-36,13,-99,-25,-26,-27,-28,13,13,13,13,-75,68,68,12,-35,-37,-79,-38,13,-76,-39,13,-77,-78,13,-80,-81,]),'PONTO_VIRGULA':([3,9,10,41,55,56,58,59,60,61,62,63,65,66,67,68,76,77,78,79,80,81,82,92,100,126,128,130,132,133,134,135,139,140,141,142,143,144,149,153,155,158,168,180,185,190,194,195,199,203,206,208,209,217,219,222,],[4,42,-4,-5,-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,-6,126,-91,-92,-93,-94,-95,131,-49,-7,-98,-90,161,162,163,164,-45,-47,-51,-59,-64,-73,173,178,-84,-99,186,196,-79,200,-85,-86,207,210,-97,213,214,-96,221,223,]),'VAR':([4,196,210,],[6,6,6,]),'BEGIN':([4,5,7,9,10,41,76,97,120,126,166,174,196,201,202,204,210,215,],[-100,8,-3,-2,-4,-5,-6,138,138,-7,138,138,-100,138,138,211,-100,218,]),'WRITELN':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[30,30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,30,-98,-33,-34,-36,30,-99,-25,-26,-27,-28,30,30,30,30,-75,-35,-37,-79,-38,30,-76,-39,30,-77,-78,30,-80,-81,]),'WRITE':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[31,31,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,31,-98,-33,-34,-36,31,-99,-25,-26,-27,-28,31,31,31,31,-75,-35,-37,-79,-38,31,-76,-39,31,-77,-78,31,-80,-81,]),'READLN':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[32,32,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,32,-98,-33,-34,-36,32,-99,-25,-26,-27,-28,32,32,32,32,-75,-35,-37,-79,-38,32,-76,-39,32,-77,-78,32,-80,-81,]),'READ':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[33,33,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,33,-98,-33,-34,-36,33,-99,-25,-26,-27,-28,33,33,33,33,-75,-35,-37,-79,-38,33,-76,-39,33,-77,-78,33,-80,-81,]),'IF':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[34,34,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,34,-98,-33,-34,-36,34,-99,-25,-26,-27,-28,34,34,34,34,-75,-35,-37,-79,-38,34,-76,-39,34,-77,-78,34,-80,-81,]),'CASE':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[35,35,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,35,-98,-33,-34,-36,35,-99,-25,-26,-27,-28,35,35,35,35,-75,-35,-37,-79,-38,35,-76,-39,35,-77,-78,35,-80,-81,]),'WHILE':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[36,36,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,36,-98,-33,-34,-36,36,-99,-25,-26,-27,-28,36,36,36,36,-75,-35,-37,-79,-38,36,-76,-39,36,-77,-78,36,-80,-81,]),'FOR':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[37,37,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,37,-98,-33,-34,-36,37,-99,-25,-26,-27,-28,37,37,37,37,-75,-35,-37,-79,-38,37,-76,-39,37,-77,-78,37,-80,-81,]),'FUNCTION':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[38,38,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,38,-98,-33,-34,-36,38,-99,-25,-26,-27,-28,38,38,38,38,-75,-35,-37,-79,-38,38,-76,-39,38,-77,-78,38,-80,-81,]),'PROCEDURE':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,97,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,183,184,185,186,187,200,207,211,213,214,218,221,223,],[39,39,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,39,-98,-33,-34,-36,39,-99,-25,-26,-27,-28,39,39,39,39,-75,-35,-37,-79,-38,39,-76,-39,39,-77,-78,39,-80,-81,]),'BUILTIN_FUNC':([8,15,16,17,18,19,20,21,22,23,24,25,26,27,28,34,35,36,46,48,49,57,64,71,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,128,131,136,137,138,158,161,162,163,164,165,167,169,171,173,175,176,183,184,185,186,187,200,207,211,213,214,218,221,223,],[40,40,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,40,40,40,40,-11,40,40,40,40,40,40,40,40,40,-53,-54,-55,-56,-57,-58,-61,-62,-63,40,-66,-67,-68,-69,-70,40,-98,-33,-34,-36,40,-99,-25,-26,-27,-28,40,40,40,40,-75,40,40,-35,-37,-79,-38,40,-76,-39,40,-77,-78,40,-80,-81,]),'DOISPONTOS':([11,12,66,67,84,147,148,156,177,189,],[43,-8,-87,-88,-9,171,-44,179,193,-43,]),'VIRGULA':([11,12,66,67,84,85,86,87,88,89,93,94,95,96,125,130,147,148,156,160,189,],[44,-8,-87,-88,-9,-89,129,-30,-31,-32,129,129,129,129,129,-90,172,-44,44,-29,-43,]),'(':([13,30,31,32,33,34,35,36,40,46,49,57,64,68,71,73,74,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,175,176,],[45,50,51,52,53,64,64,71,75,64,64,64,64,45,64,123,124,64,64,64,64,-53,-54,-55,-56,-57,-58,-61,-62,-63,64,-66,-67,-68,-69,-70,64,64,64,]),'ASSIGN':([13,29,72,130,],[-89,49,122,-90,]),'[':([13,68,83,85,],[46,46,127,46,]),'END':([14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,48,128,131,136,137,145,146,158,161,162,163,164,167,170,173,183,184,185,186,187,188,200,207,213,214,216,220,221,223,],[47,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-11,-98,-33,-34,-36,168,-41,-99,-25,-26,-27,-28,185,-40,-75,-35,-37,-79,-38,199,-42,-76,-39,-77,-78,219,222,-80,-81,]),'ELSE':([17,18,19,20,21,22,23,24,25,26,27,28,128,131,136,137,145,146,158,161,162,163,164,170,173,183,184,185,186,188,200,207,213,214,221,223,],[-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-98,-33,165,166,169,-41,-99,-25,-26,-27,-28,-40,-75,-35,-37,-79,-38,-42,-76,-39,-77,-78,-80,-81,]),'STRING':([17,18,19,20,21,22,23,24,25,26,27,28,34,35,36,45,46,49,50,51,52,53,57,64,71,75,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,122,128,129,131,136,137,145,146,158,161,162,163,164,170,172,173,175,176,183,184,185,186,188,200,207,213,214,221,223,],[-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-53,-54,-55,-56,-57,-58,-61,-62,-63,66,-66,-67,-68,-69,-70,66,66,-98,66,-33,-34,-36,66,-41,-99,-25,-26,-27,-28,-40,66,-75,66,66,-35,-37,-79,-38,-42,-76,-39,-77,-78,-80,-81,]),'NUM':([17,18,19,20,21,22,23,24,25,26,27,28,34,35,36,45,46,49,50,51,52,53,57,64,71,75,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,122,127,128,129,131,136,137,145,146,158,161,162,163,164,170,172,173,175,176,181,183,184,185,186,188,200,207,213,214,221,223,],[-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-53,-54,-55,-56,-57,-58,-61,-62,-63,67,-66,-67,-68,-69,-70,67,67,159,-98,67,-33,-34,-36,67,-41,-99,-25,-26,-27,-28,-40,67,-75,67,67,197,-35,-37,-79,-38,-42,-76,-39,-77,-78,-80,-81,]),'NOT':([34,35,36,46,49,57,64,71,98,99,122,175,176,],[57,57,57,57,57,57,57,57,57,57,57,57,57,]),'INTEGER':([43,179,193,198,212,],[78,78,78,78,78,]),'REAL':([43,179,193,198,212,],[79,79,79,79,79,]),'STRING_TYPE':([43,179,193,198,212,],[80,80,80,80,80,]),'BOOLEAN':([43,179,193,198,212,],[81,81,81,81,81,]),'ARRAY':([43,179,193,198,212,],[83,83,83,83,83,]),'PONTO':([47,],[91,]),'THEN':([54,55,56,58,59,60,61,62,63,65,66,67,68,100,128,130,139,140,141,142,143,144,158,],[97,-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,-49,-98,-90,-45,-47,-51,-59,-64,-73,-99,]),'OR':([54,55,56,58,59,60,61,62,63,65,66,67,68,69,70,90,92,100,118,121,128,130,139,140,141,142,143,144,150,151,158,191,192,],[98,-46,-48,-50,111,-60,-65,-71,-72,-74,-87,-88,-89,98,98,98,98,-49,98,98,-98,-90,-45,-47,111,-59,-64,-73,-73,98,-99,98,98,]),'OF':([55,56,58,59,60,61,62,63,65,66,67,68,69,100,128,130,139,140,141,142,143,144,158,182,205,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,119,-49,-98,-90,-45,-47,-51,-59,-64,-73,-99,198,212,]),'DO':([55,56,58,59,60,61,62,63,65,66,67,68,70,100,128,130,139,140,141,142,143,144,150,158,191,192,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,120,-49,-98,-90,-45,-47,-51,-59,-64,-73,174,-99,201,202,]),']':([55,56,58,59,60,61,62,63,65,66,67,68,90,100,128,130,139,140,141,142,143,144,158,159,197,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,130,-49,-98,-90,-45,-47,-51,-59,-64,-73,-99,182,205,]),')':([55,56,58,59,60,61,62,63,65,66,67,68,78,79,80,81,82,85,86,87,88,89,93,94,95,96,100,118,121,123,124,125,128,130,139,140,141,142,143,144,152,153,154,155,157,158,160,194,195,206,217,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,-91,-92,-93,-94,-95,-89,128,-30,-31,-32,132,133,134,135,-49,144,150,-100,-100,158,-98,-90,-45,-47,-51,-59,-64,-73,177,-82,-83,-84,180,-99,-29,-85,-86,-97,-96,]),'TO':([55,56,58,59,60,61,62,63,65,66,67,68,100,128,130,139,140,141,142,143,144,151,158,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,-49,-98,-90,-45,-47,-51,-59,-64,-73,175,-99,]),'DOWNTO':([55,56,58,59,60,61,62,63,65,66,67,68,100,128,130,139,140,141,142,143,144,151,158,],[-46,-48,-50,-52,-60,-65,-71,-72,-74,-87,-88,-89,-49,-98,-90,-45,-47,-51,-59,-64,-73,176,-99,]),'AND':([55,56,58,59,60,61,62,63,65,66,67,68,100,128,130,139,140,141,142,143,144,150,158,],[99,-48,-50,-52,115,-65,-71,-72,-74,-87,-88,-89,-49,-98,-90,99,-47,-51,115,-64,-73,-73,-99,]),'IGUAL':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[103,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'DIFF':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[104,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'MAIOR':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[105,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'MENOR':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[106,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'MENOR_IGUAL':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[107,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'MAIOR_IGUAL':([59,60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[108,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,-59,-64,-73,-73,-99,]),'MAIS':([59,60,61,62,63,65,66,67,68,128,130,141,142,143,144,150,158,],[109,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,109,-59,-64,-73,-73,-99,]),'MENOS':([59,60,61,62,63,65,66,67,68,128,130,141,142,143,144,150,158,],[110,-60,-65,-71,-72,-74,-87,-88,-89,-98,-90,110,-59,-64,-73,-73,-99,]),'MULT':([60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[113,-65,-71,-72,-74,-87,-88,-89,-98,-90,113,-64,-73,-73,-99,]),'DIVIDE':([60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[114,-65,-71,-72,-74,-87,-88,-89,-98,-90,114,-64,-73,-73,-99,]),'DIV':([60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[116,-65,-71,-72,-74,-87,-88,-89,-98,-90,116,-64,-73,-73,-99,]),'MOD':([60,61,62,63,65,66,67,68,128,130,142,143,144,150,158,],[117,-65,-71,-72,-74,-87,-88,-89,-98,-90,117,-64,-73,-73,-99,]),'DOUBLEPOINTS':([159,],[181,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'var_declaration_part':([4,196,210,],[5,204,215,]),'empty':([4,123,124,196,210,],[7,154,154,7,7,]),'var_declaration_list':([6,],[9,]),'var_declaration':([6,9,42,],[10,41,76,]),'id_list':([6,9,42,123,124,178,],[11,11,11,156,156,156,]),'body':([8,211,218,],[14,216,220,]),'statements':([8,138,169,211,218,],[15,167,187,15,15,]),'statement':([8,15,97,138,165,167,169,171,187,211,218,],[16,48,136,16,183,48,16,188,48,16,16,]),'assign':([8,15,97,138,165,167,169,171,187,211,218,],[17,17,17,17,17,17,17,17,17,17,17,]),'writeln':([8,15,97,138,165,167,169,171,187,211,218,],[18,18,18,18,18,18,18,18,18,18,18,]),'write':([8,15,97,138,165,167,169,171,187,211,218,],[19,19,19,19,19,19,19,19,19,19,19,]),'readln':([8,15,97,138,165,167,169,171,187,211,218,],[20,20,20,20,20,20,20,20,20,20,20,]),'read':([8,15,97,138,165,167,169,171,187,211,218,],[21,21,21,21,21,21,21,21,21,21,21,]),'if':([8,15,97,138,165,167,169,171,187,211,218,],[22,22,22,22,22,22,22,22,22,22,22,]),'case':([8,15,97,138,165,167,169,171,187,211,218,],[23,23,23,23,23,23,23,23,23,23,23,]),'while':([8,15,97,138,165,167,169,171,187,211,218,],[24,24,24,24,24,24,24,24,24,24,24,]),'for':([8,15,97,138,165,167,169,171,187,211,218,],[25,25,25,25,25,25,25,25,25,25,25,]),'function':([8,15,97,138,165,167,169,171,187,211,218,],[26,26,26,26,26,26,26,26,26,26,26,]),'procedure':([8,15,97,138,165,167,169,171,187,211,218,],[27,27,27,27,27,27,27,27,27,27,27,]),'func_call':([8,15,34,35,36,46,49,57,64,71,97,98,99,101,102,112,122,138,165,167,169,171,175,176,187,211,218,],[28,28,65,65,65,65,65,65,65,65,28,65,65,65,65,65,65,28,28,28,28,28,65,65,28,28,28,]),'var':([8,15,34,35,36,45,46,49,50,51,52,53,57,64,71,75,97,98,99,101,102,112,122,129,138,165,167,169,171,175,176,187,211,218,],[29,29,63,63,63,89,63,63,89,89,89,89,63,63,63,89,29,63,63,63,63,63,63,89,29,29,29,29,29,63,63,29,29,29,]),'expression':([34,35,36,46,49,64,71,122,175,176,],[54,69,70,90,92,118,121,151,191,192,]),'and_expr':([34,35,36,46,49,64,71,98,122,175,176,],[55,55,55,55,55,55,55,139,55,55,55,]),'not_expr':([34,35,36,46,49,57,64,71,98,99,122,175,176,],[56,56,56,56,56,100,56,56,56,140,56,56,56,]),'rel_expr':([34,35,36,46,49,57,64,71,98,99,122,175,176,],[58,58,58,58,58,58,58,58,58,58,58,58,58,]),'arith_expr':([34,35,36,46,49,57,64,71,98,99,101,122,175,176,],[59,59,59,59,59,59,59,59,59,59,141,59,59,59,]),'term':([34,35,36,46,49,57,64,71,98,99,101,102,122,175,176,],[60,60,60,60,60,60,60,60,60,60,60,142,60,60,60,]),'factor':([34,35,36,46,49,57,64,71,98,99,101,102,112,122,175,176,],[61,61,61,61,61,61,61,61,61,61,61,61,143,61,61,61,]),'const':([34,35,36,45,46,49,50,51,52,53,57,64,71,75,98,99,101,102,112,119,122,129,145,172,175,176,],[62,62,62,88,62,62,88,88,88,88,62,62,62,88,62,62,62,62,62,148,62,88,148,189,62,62,]),'type':([43,179,193,198,212,],[77,195,203,206,217,]),'array_type':([43,179,193,198,212,],[82,82,82,82,82,]),'Args':([45,50,51,52,53,75,],[86,93,94,95,96,125,]),'Arg':([45,50,51,52,53,75,129,],[87,87,87,87,87,87,160,]),'rel_op':([59,],[101,]),'add_op':([59,141,],[102,102,]),'mul_op':([60,142,],[112,112,]),'compound_statement':([97,120,166,174,201,202,],[137,149,184,190,208,209,]),'case_branches':([119,],[145,]),'case_branch':([119,145,],[146,170,]),'case_labels':([119,145,],[147,147,]),'params':([123,124,],[152,157,]),'param_list':([123,124,],[153,153,]),'param':([123,124,178,],[155,155,194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID PONTO_VIRGULA var_declaration_part BEGIN body END PONTO','program',8,'p_program','pascal_sin.py',7),
  ('var_declaration_part -> VAR var_declaration_list','var_declaration_part',2,'p_var_declaration_part','pascal_sin.py',11),
  ('var_declaration_part -> empty','var_declaration_part',1,'p_var_declaration_part','pascal_sin.py',12),
  ('var_declaration_list -> var_declaration','var_declaration_list',1,'p_var_declaration_list_single','pascal_sin.py',16),
  ('var_declaration_list -> var_declaration_list var_declaration','var_declaration_list',2,'p_var_declaration_list_no_semicolon','pascal_sin.py',20),
  ('var_declaration_list -> var_declaration_list PONTO_VIRGULA var_declaration','var_declaration_list',3,'p_var_declaration_list_with_semicolon','pascal_sin.py',24),
  ('var_declaration -> id_list DOISPONTOS type PONTO_VIRGULA','var_declaration',4,'p_var_declaration','pascal_sin.py',28),
  ('id_list -> ID','id_list',1,'p_id_list','pascal_sin.py',36),
  ('id_list -> id_list VIRGULA ID','id_list',3,'p_id_list','pascal_sin.py',37),
  ('body -> statements','body',1,'p_body','pascal_sin.py',41),
  ('statements -> statements statement','statements',2,'p_statements_multiple','pascal_sin.py',45),
  ('statements -> statement','statements',1,'p_statements_single','pascal_sin.py',49),
  ('statement -> assign','statement',1,'p_statement','pascal_sin.py',53),
  ('statement -> writeln','statement',1,'p_statement','pascal_sin.py',54),
  ('statement -> write','statement',1,'p_statement','pascal_sin.py',55),
  ('statement -> readln','statement',1,'p_statement','pascal_sin.py',56),
  ('statement -> read','statement',1,'p_statement','pascal_sin.py',57),
  ('statement -> if','statement',1,'p_statement','pascal_sin.py',58),
  ('statement -> case','statement',1,'p_statement','pascal_sin.py',59),
  ('statement -> while','statement',1,'p_statement','pascal_sin.py',60),
  ('statement -> for','statement',1,'p_statement','pascal_sin.py',61),
  ('statement -> function','statement',1,'p_statement','pascal_sin.py',62),
  ('statement -> procedure','statement',1,'p_statement','pascal_sin.py',63),
  ('statement -> func_call','statement',1,'p_statement','pascal_sin.py',64),
  ('writeln -> WRITELN ( Args ) PONTO_VIRGULA','writeln',5,'p_writeln','pascal_sin.py',68),
  ('write -> WRITE ( Args ) PONTO_VIRGULA','write',5,'p_write','pascal_sin.py',72),
  ('readln -> READLN ( Args ) PONTO_VIRGULA','readln',5,'p_readln','pascal_sin.py',76),
  ('read -> READ ( Args ) PONTO_VIRGULA','read',5,'p_read','pascal_sin.py',80),
  ('Args -> Args VIRGULA Arg','Args',3,'p_parametro','pascal_sin.py',84),
  ('Args -> Arg','Args',1,'p_args_single','pascal_sin.py',88),
  ('Arg -> const','Arg',1,'p_arg','pascal_sin.py',92),
  ('Arg -> var','Arg',1,'p_arg','pascal_sin.py',93),
  ('assign -> var ASSIGN expression PONTO_VIRGULA','assign',4,'p_statement_assign','pascal_sin.py',97),
  ('if -> IF expression THEN statement','if',4,'p_statement_if','pascal_sin.py',101),
  ('if -> IF expression THEN statement ELSE statement','if',6,'p_statement_if','pascal_sin.py',102),
  ('if -> IF expression THEN compound_statement','if',4,'p_statement_if','pascal_sin.py',103),
  ('if -> IF expression THEN compound_statement ELSE compound_statement','if',6,'p_statement_if','pascal_sin.py',104),
  ('case -> CASE expression OF case_branches END PONTO_VIRGULA','case',6,'p_statement_case','pascal_sin.py',111),
  ('case -> CASE expression OF case_branches ELSE statements END PONTO_VIRGULA','case',8,'p_statement_case','pascal_sin.py',112),
  ('case_branches -> case_branches case_branch','case_branches',2,'p_case_branches','pascal_sin.py',116),
  ('case_branches -> case_branch','case_branches',1,'p_case_branches','pascal_sin.py',117),
  ('case_branch -> case_labels DOISPONTOS statement','case_branch',3,'p_case_branch','pascal_sin.py',121),
  ('case_labels -> case_labels VIRGULA const','case_labels',3,'p_case_labels','pascal_sin.py',125),
  ('case_labels -> const','case_labels',1,'p_case_labels','pascal_sin.py',126),
  ('expression -> expression OR and_expr','expression',3,'p_expression','pascal_sin.py',130),
  ('expression -> and_expr','expression',1,'p_expression_base','pascal_sin.py',134),
  ('and_expr -> and_expr AND not_expr','and_expr',3,'p_and_expr','pascal_sin.py',138),
  ('and_expr -> not_expr','and_expr',1,'p_and_expr_base','pascal_sin.py',142),
  ('not_expr -> NOT not_expr','not_expr',2,'p_not_expr_not','pascal_sin.py',146),
  ('not_expr -> rel_expr','not_expr',1,'p_not_expr_base','pascal_sin.py',150),
  ('rel_expr -> arith_expr rel_op arith_expr','rel_expr',3,'p_rel_expr','pascal_sin.py',154),
  ('rel_expr -> arith_expr','rel_expr',1,'p_rel_expr','pascal_sin.py',155),
  ('rel_op -> IGUAL','rel_op',1,'p_rel_op','pascal_sin.py',159),
  ('rel_op -> DIFF','rel_op',1,'p_rel_op','pascal_sin.py',160),
  ('rel_op -> MAIOR','rel_op',1,'p_rel_op','pascal_sin.py',161),
  ('rel_op -> MENOR','rel_op',1,'p_rel_op','pascal_sin.py',162),
  ('rel_op -> MENOR_IGUAL','rel_op',1,'p_rel_op','pascal_sin.py',163),
  ('rel_op -> MAIOR_IGUAL','rel_op',1,'p_rel_op','pascal_sin.py',164),
  ('arith_expr -> arith_expr add_op term','arith_expr',3,'p_arith_expr','pascal_sin.py',168),
  ('arith_expr -> term','arith_expr',1,'p_arith_expr_term','pascal_sin.py',172),
  ('add_op -> MAIS','add_op',1,'p_add_op','pascal_sin.py',176),
  ('add_op -> MENOS','add_op',1,'p_add_op','pascal_sin.py',177),
  ('add_op -> OR','add_op',1,'p_add_op','pascal_sin.py',178),
  ('term -> term mul_op factor','term',3,'p_term','pascal_sin.py',182),
  ('term -> factor','term',1,'p_term_factor','pascal_sin.py',186),
  ('mul_op -> MULT','mul_op',1,'p_mul_op','pascal_sin.py',190),
  ('mul_op -> DIVIDE','mul_op',1,'p_mul_op','pascal_sin.py',191),
  ('mul_op -> AND','mul_op',1,'p_mul_op','pascal_sin.py',192),
  ('mul_op -> DIV','mul_op',1,'p_mul_op','pascal_sin.py',193),
  ('mul_op -> MOD','mul_op',1,'p_mul_op','pascal_sin.py',194),
  ('factor -> const','factor',1,'p_factor','pascal_sin.py',198),
  ('factor -> var','factor',1,'p_factor','pascal_sin.py',199),
  ('factor -> ( expression )','factor',3,'p_factor','pascal_sin.py',200),
  ('factor -> func_call','factor',1,'p_factor','pascal_sin.py',201),
  ('while -> WHILE expression DO compound_statement PONTO_VIRGULA','while',5,'p_ciclo_while','pascal_sin.py',205),
  ('while -> WHILE ( expression ) DO compound_statement PONTO_VIRGULA','while',7,'p_ciclo_while','pascal_sin.py',206),
  ('for -> FOR ID ASSIGN expression TO expression DO compound_statement PONTO_VIRGULA','for',9,'p_ciclo_for','pascal_sin.py',210),
  ('for -> FOR ID ASSIGN expression DOWNTO expression DO compound_statement PONTO_VIRGULA','for',9,'p_ciclo_for','pascal_sin.py',211),
  ('compound_statement -> BEGIN statements END','compound_statement',3,'p_compound_statement','pascal_sin.py',216),
  ('procedure -> PROCEDURE ID ( params ) PONTO_VIRGULA var_declaration_part BEGIN body END PONTO_VIRGULA','procedure',11,'p_proc_decl','pascal_sin.py',220),
  ('function -> FUNCTION ID ( params ) DOISPONTOS type PONTO_VIRGULA var_declaration_part BEGIN body END PONTO_VIRGULA','function',13,'p_func_decl','pascal_sin.py',224),
  ('params -> param_list','params',1,'p_params','pascal_sin.py',228),
  ('params -> empty','params',1,'p_params','pascal_sin.py',229),
  ('param_list -> param','param_list',1,'p_param_list','pascal_sin.py',233),
  ('param_list -> param_list PONTO_VIRGULA param','param_list',3,'p_param_list','pascal_sin.py',234),
  ('param -> id_list DOISPONTOS type','param',3,'p_param','pascal_sin.py',238),
  ('const -> STRING','const',1,'p_const','pascal_sin.py',242),
  ('const -> NUM','const',1,'p_const','pascal_sin.py',243),
  ('var -> ID','var',1,'p_var','pascal_sin.py',247),
  ('var -> ID [ expression ]','var',4,'p_var','pascal_sin.py',248),
  ('type -> INTEGER','type',1,'p_type','pascal_sin.py',252),
  ('type -> REAL','type',1,'p_type','pascal_sin.py',253),
  ('type -> STRING_TYPE','type',1,'p_type','pascal_sin.py',254),
  ('type -> BOOLEAN','type',1,'p_type','pascal_sin.py',255),
  ('type -> array_type','type',1,'p_type','pascal_sin.py',256),
  ('array_type -> ARRAY [ NUM DOUBLEPOINTS NUM ] OF type','array_type',8,'p_array_type','pascal_sin.py',260),
  ('array_type -> ARRAY [ NUM ] OF type','array_type',6,'p_array_type','pascal_sin.py',261),
  ('func_call -> ID ( Args )','func_call',4,'p_func_call','pascal_sin.py',268),
  ('func_call -> BUILTIN_FUNC ( Args )','func_call',4,'p_func_call','pascal_sin.py',269),
  ('empty -> <empty>','empty',0,'p_empty','pascal_sin.py',273),
]
